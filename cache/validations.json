{
  "version": "3.2",
  "log": [
    {
      "ContextUpgradeable": {
        "src": "contracts\\Open-Zeppelin.sol:38",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20BurnableUpgradeable": {
        "src": "contracts\\Open-Zeppelin.sol:538",
        "inherit": [
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "contracts\\Open-Zeppelin.sol:209",
        "version": {
          "withMetadata": "fbd79eec139407a8850f0c5a65d1cf9f6490186f4bc940da16f1440b8b68501b",
          "withoutMetadata": "1fb03470183a5715d027bd2b95d31d0e06e42d95020537b4596f35cb6a449d44",
          "linkedWithoutMetadata": "1fb03470183a5715d027bd2b95d31d0e06e42d95020537b4596f35cb6a449d44"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\Open-Zeppelin.sol:210"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\Open-Zeppelin.sol:212"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\Open-Zeppelin.sol:214"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\Open-Zeppelin.sol:216"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\Open-Zeppelin.sol:217"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "contracts\\Open-Zeppelin.sol:192",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "contracts\\Open-Zeppelin.sol:117",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "contracts\\Open-Zeppelin.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "contracts\\Open-Zeppelin.sol:11"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "contracts\\Open-Zeppelin.sol:16"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "OwnableUpgradeable": {
        "src": "contracts\\Open-Zeppelin.sol:56",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\Open-Zeppelin.sol:57"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\PancakeRouter.sol:359",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeFactory": {
        "src": "contracts\\PancakeRouter.sol:177",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "INIT_CODE_PAIR_HASH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakePair": {
        "src": "contracts\\PancakeRouter.sol:228",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter01": {
        "src": "contracts\\PancakeRouter.sol:38",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter02": {
        "src": "contracts\\PancakeRouter.sol:134",
        "inherit": [
          "IPancakeRouter01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts\\PancakeRouter.sol:376",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeLibrary": {
        "src": "contracts\\PancakeRouter.sol:280",
        "version": {
          "withMetadata": "54a091a767a23fa71e795fc3e02a1862a29f2857b3cb25c8b16bfe320c1c6bac",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeRouter": {
        "src": "contracts\\PancakeRouter.sol:385",
        "version": {
          "withMetadata": "ec8acd4c9e8bf030d86d7f8f67444ed01941a2be35777b0645c316d5ff9057e1",
          "withoutMetadata": "083b71a9ca44647b5eafdeafeca4c443caaac7dd23283a6da0ee6a02b9aaedd4",
          "linkedWithoutMetadata": "083b71a9ca44647b5eafdeafeca4c443caaac7dd23283a6da0ee6a02b9aaedd4"
        },
        "inherit": [
          "IPancakeRouter02",
          "IPancakeRouter01"
        ],
        "libraries": [
          "SafeMath",
          "PancakeLibrary",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeRouter",
            "src": "contracts\\PancakeRouter.sol:396"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts\\PancakeRouter.sol:388"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts\\PancakeRouter.sol:389"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\PancakeRouter.sol:199",
        "version": {
          "withMetadata": "71764763f966a1cef739b0b66ee21236f9a700291aac9f0ee28d0b5c800a5bf8",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts\\PancakeRouter.sol:11",
        "version": {
          "withMetadata": "58298db1b4839832542b9de655bb22f607c38f55c656a6b50814846b772c6979",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Pledge01Up": {
        "src": "contracts\\Pledge01Up.sol:12",
        "version": {
          "withMetadata": "02741c5b87acd0c5fe632f8426f94bcd32375627bc16e526d093546f8f4f00d2",
          "withoutMetadata": "0f34852494df40f3545124f5b51017e64259243b206f8863cbc37ed93f78c87c",
          "linkedWithoutMetadata": "0f34852494df40f3545124f5b51017e64259243b206f8863cbc37ed93f78c87c"
        },
        "inherit": [
          "OwnableUpgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "name()",
          "symbol()",
          "getOwner()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "burn(uint256)",
          "burnFrom(address,uint256)",
          "initialize((address,address,address,address))",
          "__Pledge_init()",
          "__Pledge_init_unchained()",
          "___test___setLastTransferTime(address,uint256)",
          "feeBalances()",
          "restoreFees(bool)",
          "setMinHoldTimeSec(uint256)",
          "setMaxTransferAmount(uint256)",
          "setBeneficiaries((address,address,address,address))",
          "createLiquidityPool(address)",
          "setFees((uint256,uint256,uint256,uint256),bool)",
          "freeFromFees(address,bool)",
          "setGeneralCharityAddress(address)",
          "addCharityAddress(address)",
          "removeCharityAddress(address)",
          "changeCharityAddress(address,address)",
          "preferCharityAddress(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Pledge01Up",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\Pledge01Up.sol:26"
            },
            {
              "contract": "Pledge01Up",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\Pledge01Up.sol:28"
            },
            {
              "contract": "Pledge01Up",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\Pledge01Up.sol:30"
            },
            {
              "contract": "Pledge01Up",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\Pledge01Up.sol:32"
            },
            {
              "contract": "Pledge01Up",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\Pledge01Up.sol:33"
            },
            {
              "contract": "Pledge01Up",
              "label": "initialLowerFees",
              "type": "t_struct(Fees)5243_storage",
              "src": "contracts\\Pledge01Up.sol:470"
            },
            {
              "contract": "Pledge01Up",
              "label": "lowerFees",
              "type": "t_struct(Fees)5243_storage",
              "src": "contracts\\Pledge01Up.sol:471"
            },
            {
              "contract": "Pledge01Up",
              "label": "initialHigherFees",
              "type": "t_struct(Fees)5243_storage",
              "src": "contracts\\Pledge01Up.sol:472"
            },
            {
              "contract": "Pledge01Up",
              "label": "higherFees",
              "type": "t_struct(Fees)5243_storage",
              "src": "contracts\\Pledge01Up.sol:473"
            },
            {
              "contract": "Pledge01Up",
              "label": "beneficiaries",
              "type": "t_struct(Beneficiaries)5261_storage",
              "src": "contracts\\Pledge01Up.sol:475"
            },
            {
              "contract": "Pledge01Up",
              "label": "maxTransferAmount",
              "type": "t_uint256",
              "src": "contracts\\Pledge01Up.sol:477"
            },
            {
              "contract": "Pledge01Up",
              "label": "minHoldTimeSec",
              "type": "t_uint256",
              "src": "contracts\\Pledge01Up.sol:478"
            },
            {
              "contract": "Pledge01Up",
              "label": "pancakeRouter",
              "type": "t_contract(IPancakeRouter02)1479",
              "src": "contracts\\Pledge01Up.sol:480"
            },
            {
              "contract": "Pledge01Up",
              "label": "pancakePair",
              "type": "t_address",
              "src": "contracts\\Pledge01Up.sol:481"
            },
            {
              "contract": "Pledge01Up",
              "label": "generalCharityAddress",
              "type": "t_address",
              "src": "contracts\\Pledge01Up.sol:483"
            },
            {
              "contract": "Pledge01Up",
              "label": "isCharityAddress",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Pledge01Up.sol:484"
            },
            {
              "contract": "Pledge01Up",
              "label": "preferredCharityAddress",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts\\Pledge01Up.sol:485"
            },
            {
              "contract": "Pledge01Up",
              "label": "isFeeFree",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Pledge01Up.sol:487"
            },
            {
              "contract": "Pledge01Up",
              "label": "lastTransferTime",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\Pledge01Up.sol:488"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_struct(Fees)5243_storage": {
              "label": "struct Pledge01Up.Fees",
              "members": [
                {
                  "label": "marketing",
                  "type": "t_uint256"
                },
                {
                  "label": "charity",
                  "type": "t_uint256"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256"
                },
                {
                  "label": "lottery",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(Beneficiaries)5261_storage": {
              "label": "struct Pledge01Up.Beneficiaries",
              "members": [
                {
                  "label": "marketing",
                  "type": "t_address"
                },
                {
                  "label": "charity",
                  "type": "t_address"
                },
                {
                  "label": "liquidity",
                  "type": "t_address"
                },
                {
                  "label": "lottery",
                  "type": "t_address"
                }
              ]
            },
            "t_contract(IPancakeRouter02)1479": {
              "label": "contract IPancakeRouter02"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pledge02Up": {
        "src": "contracts\\Pledge02Up.sol:7",
        "version": {
          "withMetadata": "d4f6aa05c7891fd012f60399a680109ae9438f1ac94cd7ced5df7fc38a622623",
          "withoutMetadata": "ffb9e8eb3e8c79cdc3accc425f79f772d74f5482a132da6f3bb3ef6e88669b8a",
          "linkedWithoutMetadata": "ffb9e8eb3e8c79cdc3accc425f79f772d74f5482a132da6f3bb3ef6e88669b8a"
        },
        "inherit": [
          "Pledge01Up",
          "OwnableUpgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__PledgeV6_init()",
          "__PledgeV6_init_unchained()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Pledge07Up": {
        "src": "contracts\\Pledge07Up.sol:12",
        "version": {
          "withMetadata": "76687a02224424df9ac84fd2b5c5674de4ecb6567f7326a0443704dd5ca1bc69",
          "withoutMetadata": "7de8d049967c0ba1d76625af52cbae03c78a42188e38604eecaa0408758ba8ba",
          "linkedWithoutMetadata": "7de8d049967c0ba1d76625af52cbae03c78a42188e38604eecaa0408758ba8ba"
        },
        "inherit": [
          "OwnableUpgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "console"
        ],
        "methods": [
          "name()",
          "symbol()",
          "getOwner()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "burn(uint256)",
          "burnFrom(address,uint256)",
          "initialize()",
          "__Pledge_init()",
          "__Pledge_init_unchained()",
          "feeBalances()",
          "restoreFees(bool)",
          "setMinHoldTimeSec(uint256)",
          "setMaxTransferAmount(uint256)",
          "toLiquify(bool)",
          "setBeneficiaries((address,address,address,address))",
          "createLiquidityPool(address)",
          "setFees((uint256,uint256,uint256,uint256),bool)",
          "freeFromFees(address,bool)",
          "setGeneralCharityAddress(address)",
          "addCharityAddress(address)",
          "removeCharityAddress(address)",
          "changeCharityAddress(address,address)",
          "preferCharityAddress(address)",
          "liquify()",
          "()",
          "___test___setLastTransferTime(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Pledge07Up",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\Pledge07Up.sol:32"
            },
            {
              "contract": "Pledge07Up",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\Pledge07Up.sol:34"
            },
            {
              "contract": "Pledge07Up",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\Pledge07Up.sol:36"
            },
            {
              "contract": "Pledge07Up",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\Pledge07Up.sol:38"
            },
            {
              "contract": "Pledge07Up",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\Pledge07Up.sol:39"
            },
            {
              "contract": "Pledge07Up",
              "label": "initialLowerFees",
              "type": "t_struct(Fees)7204_storage",
              "src": "contracts\\Pledge07Up.sol:472"
            },
            {
              "contract": "Pledge07Up",
              "label": "lowerFees",
              "type": "t_struct(Fees)7204_storage",
              "src": "contracts\\Pledge07Up.sol:473"
            },
            {
              "contract": "Pledge07Up",
              "label": "initialHigherFees",
              "type": "t_struct(Fees)7204_storage",
              "src": "contracts\\Pledge07Up.sol:474"
            },
            {
              "contract": "Pledge07Up",
              "label": "higherFees",
              "type": "t_struct(Fees)7204_storage",
              "src": "contracts\\Pledge07Up.sol:475"
            },
            {
              "contract": "Pledge07Up",
              "label": "beneficiaries",
              "type": "t_struct(Beneficiaries)7222_storage",
              "src": "contracts\\Pledge07Up.sol:477"
            },
            {
              "contract": "Pledge07Up",
              "label": "maxTransferAmount",
              "type": "t_uint256",
              "src": "contracts\\Pledge07Up.sol:479"
            },
            {
              "contract": "Pledge07Up",
              "label": "liquidityQuantum",
              "type": "t_uint256",
              "src": "contracts\\Pledge07Up.sol:480"
            },
            {
              "contract": "Pledge07Up",
              "label": "minHoldTimeSec",
              "type": "t_uint256",
              "src": "contracts\\Pledge07Up.sol:481"
            },
            {
              "contract": "Pledge07Up",
              "label": "pancakeRouter",
              "type": "t_contract(IPancakeRouter02)1479",
              "src": "contracts\\Pledge07Up.sol:483"
            },
            {
              "contract": "Pledge07Up",
              "label": "pancakePair",
              "type": "t_address",
              "src": "contracts\\Pledge07Up.sol:484"
            },
            {
              "contract": "Pledge07Up",
              "label": "generalCharityAddress",
              "type": "t_address",
              "src": "contracts\\Pledge07Up.sol:486"
            },
            {
              "contract": "Pledge07Up",
              "label": "isCharityAddress",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Pledge07Up.sol:487"
            },
            {
              "contract": "Pledge07Up",
              "label": "preferredCharityAddress",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts\\Pledge07Up.sol:488"
            },
            {
              "contract": "Pledge07Up",
              "label": "isFeeFree",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Pledge07Up.sol:490"
            },
            {
              "contract": "Pledge07Up",
              "label": "lastTransferTime",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\Pledge07Up.sol:491"
            },
            {
              "contract": "Pledge07Up",
              "label": "autoliquify",
              "type": "t_bool",
              "src": "contracts\\Pledge07Up.sol:493"
            },
            {
              "contract": "Pledge07Up",
              "label": "beneficiariesSet",
              "type": "t_bool",
              "src": "contracts\\Pledge07Up.sol:494"
            },
            {
              "contract": "Pledge07Up",
              "label": "liquifying",
              "type": "t_bool",
              "src": "contracts\\Pledge07Up.sol:575"
            },
            {
              "contract": "Pledge07Up",
              "label": "__gap",
              "type": "t_array(t_uint256)10_storage",
              "src": "contracts\\Pledge07Up.sol:953"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_struct(Fees)7204_storage": {
              "label": "struct Pledge07Up.Fees",
              "members": [
                {
                  "label": "marketing",
                  "type": "t_uint256"
                },
                {
                  "label": "charity",
                  "type": "t_uint256"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256"
                },
                {
                  "label": "lottery",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(Beneficiaries)7222_storage": {
              "label": "struct Pledge07Up.Beneficiaries",
              "members": [
                {
                  "label": "marketing",
                  "type": "t_address"
                },
                {
                  "label": "charity",
                  "type": "t_address"
                },
                {
                  "label": "liquidity",
                  "type": "t_address"
                },
                {
                  "label": "lottery",
                  "type": "t_address"
                }
              ]
            },
            "t_contract(IPancakeRouter02)1479": {
              "label": "contract IPancakeRouter02"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pledge08Up": {
        "src": "contracts\\Pledge08Up.sol:7",
        "version": {
          "withMetadata": "ad4f355a599aedf16fdb3c50aed752a8fa5b25e6117358fd61abebbb1c54aa06",
          "withoutMetadata": "7d243f18b21873fcd8be32955d88d29391c4fa420a91beb92937d841229afc0a",
          "linkedWithoutMetadata": "7d243f18b21873fcd8be32955d88d29391c4fa420a91beb92937d841229afc0a"
        },
        "inherit": [
          "Pledge07Up",
          "OwnableUpgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__PledgeV8_init()",
          "__PledgeV8_init_unchained()",
          "___test___setLastTransferTime(address,uint256)",
          "changeOperator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Pledge08Up",
              "label": "operator",
              "type": "t_address",
              "src": "contracts\\Pledge08Up.sol:28"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "f91739d874ef9d6858f92c1fabe8058a216bf98ac5d7d916a09a2bae78199fcc",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "59f92ec65bbd88d02912ba405296a5a7c26c1fb880faee84220511dd2afb019c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "WETH9": {
        "src": "contracts\\weth.sol:5",
        "version": {
          "withMetadata": "5e30683c68dfd83b96cd41276d00c3c8400b39c1e82f8f07a3a89d0ed8157ebe",
          "withoutMetadata": "6740f6d3ee9bf21ff142ba25e99f346ab02afeeccddb925b9428f555ac9e4014",
          "linkedWithoutMetadata": "6740f6d3ee9bf21ff142ba25e99f346ab02afeeccddb925b9428f555ac9e4014"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()",
          "deposit()",
          "withdraw(uint256)",
          "totalSupply()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "name",
            "src": "contracts\\weth.sol:6"
          },
          {
            "kind": "state-variable-assignment",
            "name": "symbol",
            "src": "contracts\\weth.sol:7"
          },
          {
            "kind": "state-variable-assignment",
            "name": "decimals",
            "src": "contracts\\weth.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WETH9",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts\\weth.sol:6"
            },
            {
              "contract": "WETH9",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts\\weth.sol:7"
            },
            {
              "contract": "WETH9",
              "label": "decimals",
              "type": "t_uint8",
              "src": "contracts\\weth.sol:8"
            },
            {
              "contract": "WETH9",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\weth.sol:15"
            },
            {
              "contract": "WETH9",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\weth.sol:16"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "SafeMath": {
        "src": "contracts\\Safemath.sol:5",
        "version": {
          "withMetadata": "204821fb7b4b7d813742f8dac22a93154582af5fc4cb94de6544bd8ea70b2404",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "ContextUpgradeable": {
        "src": "contracts\\Open-Zeppelin.sol:38",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20BurnableUpgradeable": {
        "src": "contracts\\Open-Zeppelin.sol:538",
        "inherit": [
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "contracts\\Open-Zeppelin.sol:209",
        "version": {
          "withMetadata": "fbd79eec139407a8850f0c5a65d1cf9f6490186f4bc940da16f1440b8b68501b",
          "withoutMetadata": "1fb03470183a5715d027bd2b95d31d0e06e42d95020537b4596f35cb6a449d44",
          "linkedWithoutMetadata": "1fb03470183a5715d027bd2b95d31d0e06e42d95020537b4596f35cb6a449d44"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\Open-Zeppelin.sol:210"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\Open-Zeppelin.sol:212"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\Open-Zeppelin.sol:214"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\Open-Zeppelin.sol:216"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\Open-Zeppelin.sol:217"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "contracts\\Open-Zeppelin.sol:192",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "contracts\\Open-Zeppelin.sol:117",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "contracts\\Open-Zeppelin.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "contracts\\Open-Zeppelin.sol:11"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "contracts\\Open-Zeppelin.sol:16"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "OwnableUpgradeable": {
        "src": "contracts\\Open-Zeppelin.sol:56",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\Open-Zeppelin.sol:57"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\PancakeRouter.sol:359",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeFactory": {
        "src": "contracts\\PancakeRouter.sol:177",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "INIT_CODE_PAIR_HASH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakePair": {
        "src": "contracts\\PancakeRouter.sol:228",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter01": {
        "src": "contracts\\PancakeRouter.sol:38",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter02": {
        "src": "contracts\\PancakeRouter.sol:134",
        "inherit": [
          "IPancakeRouter01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts\\PancakeRouter.sol:376",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeLibrary": {
        "src": "contracts\\PancakeRouter.sol:280",
        "version": {
          "withMetadata": "54a091a767a23fa71e795fc3e02a1862a29f2857b3cb25c8b16bfe320c1c6bac",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeRouter": {
        "src": "contracts\\PancakeRouter.sol:385",
        "version": {
          "withMetadata": "ec8acd4c9e8bf030d86d7f8f67444ed01941a2be35777b0645c316d5ff9057e1",
          "withoutMetadata": "083b71a9ca44647b5eafdeafeca4c443caaac7dd23283a6da0ee6a02b9aaedd4",
          "linkedWithoutMetadata": "083b71a9ca44647b5eafdeafeca4c443caaac7dd23283a6da0ee6a02b9aaedd4"
        },
        "inherit": [
          "IPancakeRouter02",
          "IPancakeRouter01"
        ],
        "libraries": [
          "SafeMath",
          "PancakeLibrary",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeRouter",
            "src": "contracts\\PancakeRouter.sol:396"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts\\PancakeRouter.sol:388"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts\\PancakeRouter.sol:389"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\PancakeRouter.sol:199",
        "version": {
          "withMetadata": "71764763f966a1cef739b0b66ee21236f9a700291aac9f0ee28d0b5c800a5bf8",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts\\PancakeRouter.sol:11",
        "version": {
          "withMetadata": "58298db1b4839832542b9de655bb22f607c38f55c656a6b50814846b772c6979",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Pledge01Up": {
        "src": "contracts\\Pledge01Up.sol:12",
        "version": {
          "withMetadata": "02741c5b87acd0c5fe632f8426f94bcd32375627bc16e526d093546f8f4f00d2",
          "withoutMetadata": "0f34852494df40f3545124f5b51017e64259243b206f8863cbc37ed93f78c87c",
          "linkedWithoutMetadata": "0f34852494df40f3545124f5b51017e64259243b206f8863cbc37ed93f78c87c"
        },
        "inherit": [
          "OwnableUpgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "name()",
          "symbol()",
          "getOwner()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "burn(uint256)",
          "burnFrom(address,uint256)",
          "initialize((address,address,address,address))",
          "__Pledge_init()",
          "__Pledge_init_unchained()",
          "___test___setLastTransferTime(address,uint256)",
          "feeBalances()",
          "restoreFees(bool)",
          "setMinHoldTimeSec(uint256)",
          "setMaxTransferAmount(uint256)",
          "setBeneficiaries((address,address,address,address))",
          "createLiquidityPool(address)",
          "setFees((uint256,uint256,uint256,uint256),bool)",
          "freeFromFees(address,bool)",
          "setGeneralCharityAddress(address)",
          "addCharityAddress(address)",
          "removeCharityAddress(address)",
          "changeCharityAddress(address,address)",
          "preferCharityAddress(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Pledge01Up",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\Pledge01Up.sol:26"
            },
            {
              "contract": "Pledge01Up",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\Pledge01Up.sol:28"
            },
            {
              "contract": "Pledge01Up",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\Pledge01Up.sol:30"
            },
            {
              "contract": "Pledge01Up",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\Pledge01Up.sol:32"
            },
            {
              "contract": "Pledge01Up",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\Pledge01Up.sol:33"
            },
            {
              "contract": "Pledge01Up",
              "label": "initialLowerFees",
              "type": "t_struct(Fees)5243_storage",
              "src": "contracts\\Pledge01Up.sol:470"
            },
            {
              "contract": "Pledge01Up",
              "label": "lowerFees",
              "type": "t_struct(Fees)5243_storage",
              "src": "contracts\\Pledge01Up.sol:471"
            },
            {
              "contract": "Pledge01Up",
              "label": "initialHigherFees",
              "type": "t_struct(Fees)5243_storage",
              "src": "contracts\\Pledge01Up.sol:472"
            },
            {
              "contract": "Pledge01Up",
              "label": "higherFees",
              "type": "t_struct(Fees)5243_storage",
              "src": "contracts\\Pledge01Up.sol:473"
            },
            {
              "contract": "Pledge01Up",
              "label": "beneficiaries",
              "type": "t_struct(Beneficiaries)5261_storage",
              "src": "contracts\\Pledge01Up.sol:475"
            },
            {
              "contract": "Pledge01Up",
              "label": "maxTransferAmount",
              "type": "t_uint256",
              "src": "contracts\\Pledge01Up.sol:477"
            },
            {
              "contract": "Pledge01Up",
              "label": "minHoldTimeSec",
              "type": "t_uint256",
              "src": "contracts\\Pledge01Up.sol:478"
            },
            {
              "contract": "Pledge01Up",
              "label": "pancakeRouter",
              "type": "t_contract(IPancakeRouter02)1479",
              "src": "contracts\\Pledge01Up.sol:480"
            },
            {
              "contract": "Pledge01Up",
              "label": "pancakePair",
              "type": "t_address",
              "src": "contracts\\Pledge01Up.sol:481"
            },
            {
              "contract": "Pledge01Up",
              "label": "generalCharityAddress",
              "type": "t_address",
              "src": "contracts\\Pledge01Up.sol:483"
            },
            {
              "contract": "Pledge01Up",
              "label": "isCharityAddress",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Pledge01Up.sol:484"
            },
            {
              "contract": "Pledge01Up",
              "label": "preferredCharityAddress",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts\\Pledge01Up.sol:485"
            },
            {
              "contract": "Pledge01Up",
              "label": "isFeeFree",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Pledge01Up.sol:487"
            },
            {
              "contract": "Pledge01Up",
              "label": "lastTransferTime",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\Pledge01Up.sol:488"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_struct(Fees)5243_storage": {
              "label": "struct Pledge01Up.Fees",
              "members": [
                {
                  "label": "marketing",
                  "type": "t_uint256"
                },
                {
                  "label": "charity",
                  "type": "t_uint256"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256"
                },
                {
                  "label": "lottery",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(Beneficiaries)5261_storage": {
              "label": "struct Pledge01Up.Beneficiaries",
              "members": [
                {
                  "label": "marketing",
                  "type": "t_address"
                },
                {
                  "label": "charity",
                  "type": "t_address"
                },
                {
                  "label": "liquidity",
                  "type": "t_address"
                },
                {
                  "label": "lottery",
                  "type": "t_address"
                }
              ]
            },
            "t_contract(IPancakeRouter02)1479": {
              "label": "contract IPancakeRouter02"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pledge02Up": {
        "src": "contracts\\Pledge02Up.sol:7",
        "version": {
          "withMetadata": "d4f6aa05c7891fd012f60399a680109ae9438f1ac94cd7ced5df7fc38a622623",
          "withoutMetadata": "ffb9e8eb3e8c79cdc3accc425f79f772d74f5482a132da6f3bb3ef6e88669b8a",
          "linkedWithoutMetadata": "ffb9e8eb3e8c79cdc3accc425f79f772d74f5482a132da6f3bb3ef6e88669b8a"
        },
        "inherit": [
          "Pledge01Up",
          "OwnableUpgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__PledgeV6_init()",
          "__PledgeV6_init_unchained()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Pledge07Up": {
        "src": "contracts\\Pledge07Up.sol:12",
        "version": {
          "withMetadata": "e3329cbc0410ac84c5c798d38a611b0070c98720512094f258316e95b839db66",
          "withoutMetadata": "467fa3a35f82360f456cc8e7a89dad21ec5a5e34d4dcfb47945a012add2d4809",
          "linkedWithoutMetadata": "467fa3a35f82360f456cc8e7a89dad21ec5a5e34d4dcfb47945a012add2d4809"
        },
        "inherit": [
          "OwnableUpgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "console"
        ],
        "methods": [
          "name()",
          "symbol()",
          "getOwner()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "burn(uint256)",
          "burnFrom(address,uint256)",
          "initialize()",
          "__Pledge_init()",
          "__Pledge_init_unchained()",
          "feeBalances()",
          "restoreFees(bool)",
          "setMinHoldTimeSec(uint256)",
          "setMaxTransferAmount(uint256)",
          "toLiquify(bool)",
          "setBeneficiaries((address,address,address,address))",
          "createLiquidityPool(address)",
          "setFees((uint256,uint256,uint256,uint256),bool)",
          "freeFromFees(address,bool)",
          "setGeneralCharityAddress(address)",
          "addCharityAddress(address)",
          "removeCharityAddress(address)",
          "changeCharityAddress(address,address)",
          "preferCharityAddress(address)",
          "liquify()",
          "()",
          "___test___setLastTransferTime(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Pledge07Up",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\Pledge07Up.sol:32"
            },
            {
              "contract": "Pledge07Up",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\Pledge07Up.sol:34"
            },
            {
              "contract": "Pledge07Up",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\Pledge07Up.sol:36"
            },
            {
              "contract": "Pledge07Up",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\Pledge07Up.sol:38"
            },
            {
              "contract": "Pledge07Up",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\Pledge07Up.sol:39"
            },
            {
              "contract": "Pledge07Up",
              "label": "initialLowerFees",
              "type": "t_struct(Fees)7204_storage",
              "src": "contracts\\Pledge07Up.sol:472"
            },
            {
              "contract": "Pledge07Up",
              "label": "lowerFees",
              "type": "t_struct(Fees)7204_storage",
              "src": "contracts\\Pledge07Up.sol:473"
            },
            {
              "contract": "Pledge07Up",
              "label": "initialHigherFees",
              "type": "t_struct(Fees)7204_storage",
              "src": "contracts\\Pledge07Up.sol:474"
            },
            {
              "contract": "Pledge07Up",
              "label": "higherFees",
              "type": "t_struct(Fees)7204_storage",
              "src": "contracts\\Pledge07Up.sol:475"
            },
            {
              "contract": "Pledge07Up",
              "label": "beneficiaries",
              "type": "t_struct(Beneficiaries)7222_storage",
              "src": "contracts\\Pledge07Up.sol:477"
            },
            {
              "contract": "Pledge07Up",
              "label": "maxTransferAmount",
              "type": "t_uint256",
              "src": "contracts\\Pledge07Up.sol:479"
            },
            {
              "contract": "Pledge07Up",
              "label": "liquidityQuantum",
              "type": "t_uint256",
              "src": "contracts\\Pledge07Up.sol:480"
            },
            {
              "contract": "Pledge07Up",
              "label": "minHoldTimeSec",
              "type": "t_uint256",
              "src": "contracts\\Pledge07Up.sol:481"
            },
            {
              "contract": "Pledge07Up",
              "label": "pancakeRouter",
              "type": "t_contract(IPancakeRouter02)1479",
              "src": "contracts\\Pledge07Up.sol:483"
            },
            {
              "contract": "Pledge07Up",
              "label": "pancakePair",
              "type": "t_address",
              "src": "contracts\\Pledge07Up.sol:484"
            },
            {
              "contract": "Pledge07Up",
              "label": "generalCharityAddress",
              "type": "t_address",
              "src": "contracts\\Pledge07Up.sol:486"
            },
            {
              "contract": "Pledge07Up",
              "label": "isCharityAddress",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Pledge07Up.sol:487"
            },
            {
              "contract": "Pledge07Up",
              "label": "preferredCharityAddress",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts\\Pledge07Up.sol:488"
            },
            {
              "contract": "Pledge07Up",
              "label": "isFeeFree",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Pledge07Up.sol:490"
            },
            {
              "contract": "Pledge07Up",
              "label": "lastTransferTime",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\Pledge07Up.sol:491"
            },
            {
              "contract": "Pledge07Up",
              "label": "autoliquify",
              "type": "t_bool",
              "src": "contracts\\Pledge07Up.sol:493"
            },
            {
              "contract": "Pledge07Up",
              "label": "beneficiariesSet",
              "type": "t_bool",
              "src": "contracts\\Pledge07Up.sol:494"
            },
            {
              "contract": "Pledge07Up",
              "label": "liquifying",
              "type": "t_bool",
              "src": "contracts\\Pledge07Up.sol:574"
            },
            {
              "contract": "Pledge07Up",
              "label": "__gap",
              "type": "t_array(t_uint256)10_storage",
              "src": "contracts\\Pledge07Up.sol:952"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_struct(Fees)7204_storage": {
              "label": "struct Pledge07Up.Fees",
              "members": [
                {
                  "label": "marketing",
                  "type": "t_uint256"
                },
                {
                  "label": "charity",
                  "type": "t_uint256"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256"
                },
                {
                  "label": "lottery",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(Beneficiaries)7222_storage": {
              "label": "struct Pledge07Up.Beneficiaries",
              "members": [
                {
                  "label": "marketing",
                  "type": "t_address"
                },
                {
                  "label": "charity",
                  "type": "t_address"
                },
                {
                  "label": "liquidity",
                  "type": "t_address"
                },
                {
                  "label": "lottery",
                  "type": "t_address"
                }
              ]
            },
            "t_contract(IPancakeRouter02)1479": {
              "label": "contract IPancakeRouter02"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pledge08Up": {
        "src": "contracts\\Pledge08Up.sol:7",
        "version": {
          "withMetadata": "bc98fce2db9b4a03f9f1b2ed14bce1803b21fb4cde561ab2f2077211987ab192",
          "withoutMetadata": "9b5832d764eb4c3c0d7bf7e8cc6413179753b029e00a03b81affaa6bcc3b50fb",
          "linkedWithoutMetadata": "9b5832d764eb4c3c0d7bf7e8cc6413179753b029e00a03b81affaa6bcc3b50fb"
        },
        "inherit": [
          "Pledge07Up",
          "OwnableUpgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__PledgeV8_init()",
          "__PledgeV8_init_unchained()",
          "___test___setLastTransferTime(address,uint256)",
          "changeOperator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Pledge08Up",
              "label": "operator",
              "type": "t_address",
              "src": "contracts\\Pledge08Up.sol:28"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "f91739d874ef9d6858f92c1fabe8058a216bf98ac5d7d916a09a2bae78199fcc",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IERC20": {
        "src": "contracts\\PancakeFactory.sol:251",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeCallee": {
        "src": "contracts\\PancakeFactory.sol:267",
        "inherit": [],
        "libraries": [],
        "methods": [
          "pancakeCall(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeERC20": {
        "src": "contracts\\PancakeFactory.sol:86",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeFactory": {
        "src": "contracts\\PancakeFactory.sol:19",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakePair": {
        "src": "contracts\\PancakeFactory.sol:35",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts\\PancakeFactory.sol:214",
        "version": {
          "withMetadata": "cc87df5ea0e2ae70caf57e6f4a93720205f34d385bf28717b1227f1acd5d2c8c",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeERC20": {
        "src": "contracts\\PancakeFactory.sol:123",
        "version": {
          "withMetadata": "8fbb8c49e0ee515c8928f40b11cb67d9433d0766cd7d9f83b5c8bece2655104e",
          "withoutMetadata": "8fbb8c49e0ee515c8928f40b11cb67d9433d0766cd7d9f83b5c8bece2655104e",
          "linkedWithoutMetadata": "8fbb8c49e0ee515c8928f40b11cb67d9433d0766cd7d9f83b5c8bece2655104e"
        },
        "inherit": [
          "IPancakeERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeERC20",
            "src": "contracts\\PancakeFactory.sol:141"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeERC20",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts\\PancakeFactory.sol:129"
            },
            {
              "contract": "PancakeERC20",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\PancakeFactory.sol:130"
            },
            {
              "contract": "PancakeERC20",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\PancakeFactory.sol:131"
            },
            {
              "contract": "PancakeERC20",
              "label": "DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts\\PancakeFactory.sol:133"
            },
            {
              "contract": "PancakeERC20",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\PancakeFactory.sol:136"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeFactory": {
        "src": "contracts\\PancakeFactory.sol:463",
        "version": {
          "withMetadata": "a5e17dc80f1d905050a07137539bbe256786b17269ab73899bad20599b5a520c",
          "withoutMetadata": "fdf8b19829fc21ca70c2d996d9fd3892acf61ea7874b0f3d8b5df1842734ea84",
          "linkedWithoutMetadata": "fdf8b19829fc21ca70c2d996d9fd3892acf61ea7874b0f3d8b5df1842734ea84"
        },
        "inherit": [
          "IPancakeFactory"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeFactory",
            "src": "contracts\\PancakeFactory.sol:474"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeFactory",
              "label": "feeTo",
              "type": "t_address",
              "src": "contracts\\PancakeFactory.sol:466"
            },
            {
              "contract": "PancakeFactory",
              "label": "feeToSetter",
              "type": "t_address",
              "src": "contracts\\PancakeFactory.sol:467"
            },
            {
              "contract": "PancakeFactory",
              "label": "getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts\\PancakeFactory.sol:469"
            },
            {
              "contract": "PancakeFactory",
              "label": "allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\PancakeFactory.sol:470"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakePair": {
        "src": "contracts\\PancakeFactory.sol:271",
        "version": {
          "withMetadata": "2de75715eaadc263f93ae31df0472548254992f701bb9830d9ed08b3e5f4fa21",
          "withoutMetadata": "2de75715eaadc263f93ae31df0472548254992f701bb9830d9ed08b3e5f4fa21",
          "linkedWithoutMetadata": "2de75715eaadc263f93ae31df0472548254992f701bb9830d9ed08b3e5f4fa21"
        },
        "inherit": [
          "PancakeERC20",
          "IPancakeERC20",
          "IPancakePair"
        ],
        "libraries": [
          "SafeMath",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "getReserves()",
          "()",
          "initialize(address,address)",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakePair",
            "src": "contracts\\PancakeFactory.sol:321"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts\\PancakeFactory.sol:290"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakePair",
              "label": "factory",
              "type": "t_address",
              "src": "contracts\\PancakeFactory.sol:278"
            },
            {
              "contract": "PancakePair",
              "label": "token0",
              "type": "t_address",
              "src": "contracts\\PancakeFactory.sol:279"
            },
            {
              "contract": "PancakePair",
              "label": "token1",
              "type": "t_address",
              "src": "contracts\\PancakeFactory.sol:280"
            },
            {
              "contract": "PancakePair",
              "label": "reserve0",
              "type": "t_uint112",
              "src": "contracts\\PancakeFactory.sol:282"
            },
            {
              "contract": "PancakePair",
              "label": "reserve1",
              "type": "t_uint112",
              "src": "contracts\\PancakeFactory.sol:283"
            },
            {
              "contract": "PancakePair",
              "label": "blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts\\PancakeFactory.sol:284"
            },
            {
              "contract": "PancakePair",
              "label": "price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\PancakeFactory.sol:286"
            },
            {
              "contract": "PancakePair",
              "label": "price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\PancakeFactory.sol:287"
            },
            {
              "contract": "PancakePair",
              "label": "kLast",
              "type": "t_uint256",
              "src": "contracts\\PancakeFactory.sol:288"
            },
            {
              "contract": "PancakePair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts\\PancakeFactory.sol:290"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\PancakeFactory.sol:109",
        "version": {
          "withMetadata": "3ccbcbfe4f5a07bb844e33a86ba4f2461b2e373ac36c8752a86242edf16c9ede",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts\\PancakeFactory.sol:237",
        "version": {
          "withMetadata": "4f514ac26de5e111b9d9ad3e8852e874623a9bc3a33ea2c3428d191de7675cc4",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "59f92ec65bbd88d02912ba405296a5a7c26c1fb880faee84220511dd2afb019c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "WETH9": {
        "src": "contracts\\weth.sol:5",
        "version": {
          "withMetadata": "5e30683c68dfd83b96cd41276d00c3c8400b39c1e82f8f07a3a89d0ed8157ebe",
          "withoutMetadata": "6740f6d3ee9bf21ff142ba25e99f346ab02afeeccddb925b9428f555ac9e4014",
          "linkedWithoutMetadata": "6740f6d3ee9bf21ff142ba25e99f346ab02afeeccddb925b9428f555ac9e4014"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()",
          "deposit()",
          "withdraw(uint256)",
          "totalSupply()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "name",
            "src": "contracts\\weth.sol:6"
          },
          {
            "kind": "state-variable-assignment",
            "name": "symbol",
            "src": "contracts\\weth.sol:7"
          },
          {
            "kind": "state-variable-assignment",
            "name": "decimals",
            "src": "contracts\\weth.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WETH9",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts\\weth.sol:6"
            },
            {
              "contract": "WETH9",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts\\weth.sol:7"
            },
            {
              "contract": "WETH9",
              "label": "decimals",
              "type": "t_uint8",
              "src": "contracts\\weth.sol:8"
            },
            {
              "contract": "WETH9",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\weth.sol:15"
            },
            {
              "contract": "WETH9",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\weth.sol:16"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "SafeMath": {
        "src": "contracts\\Safemath.sol:5",
        "version": {
          "withMetadata": "204821fb7b4b7d813742f8dac22a93154582af5fc4cb94de6544bd8ea70b2404",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "ContextUpgradeable": {
        "src": "contracts\\Open-Zeppelin.sol:38",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20BurnableUpgradeable": {
        "src": "contracts\\Open-Zeppelin.sol:538",
        "inherit": [
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "contracts\\Open-Zeppelin.sol:209",
        "version": {
          "withMetadata": "fbd79eec139407a8850f0c5a65d1cf9f6490186f4bc940da16f1440b8b68501b",
          "withoutMetadata": "1fb03470183a5715d027bd2b95d31d0e06e42d95020537b4596f35cb6a449d44",
          "linkedWithoutMetadata": "1fb03470183a5715d027bd2b95d31d0e06e42d95020537b4596f35cb6a449d44"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\Open-Zeppelin.sol:210"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\Open-Zeppelin.sol:212"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\Open-Zeppelin.sol:214"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\Open-Zeppelin.sol:216"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\Open-Zeppelin.sol:217"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "contracts\\Open-Zeppelin.sol:192",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "contracts\\Open-Zeppelin.sol:117",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "contracts\\Open-Zeppelin.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "contracts\\Open-Zeppelin.sol:11"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "contracts\\Open-Zeppelin.sol:16"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "OwnableUpgradeable": {
        "src": "contracts\\Open-Zeppelin.sol:56",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\Open-Zeppelin.sol:57"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\PancakeRouter.sol:359",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeFactory": {
        "src": "contracts\\PancakeRouter.sol:177",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "INIT_CODE_PAIR_HASH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakePair": {
        "src": "contracts\\PancakeRouter.sol:228",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter01": {
        "src": "contracts\\PancakeRouter.sol:38",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter02": {
        "src": "contracts\\PancakeRouter.sol:134",
        "inherit": [
          "IPancakeRouter01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts\\PancakeRouter.sol:376",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeLibrary": {
        "src": "contracts\\PancakeRouter.sol:280",
        "version": {
          "withMetadata": "54a091a767a23fa71e795fc3e02a1862a29f2857b3cb25c8b16bfe320c1c6bac",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeRouter": {
        "src": "contracts\\PancakeRouter.sol:385",
        "version": {
          "withMetadata": "ec8acd4c9e8bf030d86d7f8f67444ed01941a2be35777b0645c316d5ff9057e1",
          "withoutMetadata": "083b71a9ca44647b5eafdeafeca4c443caaac7dd23283a6da0ee6a02b9aaedd4",
          "linkedWithoutMetadata": "083b71a9ca44647b5eafdeafeca4c443caaac7dd23283a6da0ee6a02b9aaedd4"
        },
        "inherit": [
          "IPancakeRouter02",
          "IPancakeRouter01"
        ],
        "libraries": [
          "SafeMath",
          "PancakeLibrary",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeRouter",
            "src": "contracts\\PancakeRouter.sol:396"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts\\PancakeRouter.sol:388"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts\\PancakeRouter.sol:389"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\PancakeRouter.sol:199",
        "version": {
          "withMetadata": "71764763f966a1cef739b0b66ee21236f9a700291aac9f0ee28d0b5c800a5bf8",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts\\PancakeRouter.sol:11",
        "version": {
          "withMetadata": "58298db1b4839832542b9de655bb22f607c38f55c656a6b50814846b772c6979",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Pledge01Up": {
        "src": "contracts\\Pledge01Up.sol:12",
        "version": {
          "withMetadata": "02741c5b87acd0c5fe632f8426f94bcd32375627bc16e526d093546f8f4f00d2",
          "withoutMetadata": "0f34852494df40f3545124f5b51017e64259243b206f8863cbc37ed93f78c87c",
          "linkedWithoutMetadata": "0f34852494df40f3545124f5b51017e64259243b206f8863cbc37ed93f78c87c"
        },
        "inherit": [
          "OwnableUpgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "name()",
          "symbol()",
          "getOwner()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "burn(uint256)",
          "burnFrom(address,uint256)",
          "initialize((address,address,address,address))",
          "__Pledge_init()",
          "__Pledge_init_unchained()",
          "___test___setLastTransferTime(address,uint256)",
          "feeBalances()",
          "restoreFees(bool)",
          "setMinHoldTimeSec(uint256)",
          "setMaxTransferAmount(uint256)",
          "setBeneficiaries((address,address,address,address))",
          "createLiquidityPool(address)",
          "setFees((uint256,uint256,uint256,uint256),bool)",
          "freeFromFees(address,bool)",
          "setGeneralCharityAddress(address)",
          "addCharityAddress(address)",
          "removeCharityAddress(address)",
          "changeCharityAddress(address,address)",
          "preferCharityAddress(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Pledge01Up",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\Pledge01Up.sol:26"
            },
            {
              "contract": "Pledge01Up",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\Pledge01Up.sol:28"
            },
            {
              "contract": "Pledge01Up",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\Pledge01Up.sol:30"
            },
            {
              "contract": "Pledge01Up",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\Pledge01Up.sol:32"
            },
            {
              "contract": "Pledge01Up",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\Pledge01Up.sol:33"
            },
            {
              "contract": "Pledge01Up",
              "label": "initialLowerFees",
              "type": "t_struct(Fees)5243_storage",
              "src": "contracts\\Pledge01Up.sol:470"
            },
            {
              "contract": "Pledge01Up",
              "label": "lowerFees",
              "type": "t_struct(Fees)5243_storage",
              "src": "contracts\\Pledge01Up.sol:471"
            },
            {
              "contract": "Pledge01Up",
              "label": "initialHigherFees",
              "type": "t_struct(Fees)5243_storage",
              "src": "contracts\\Pledge01Up.sol:472"
            },
            {
              "contract": "Pledge01Up",
              "label": "higherFees",
              "type": "t_struct(Fees)5243_storage",
              "src": "contracts\\Pledge01Up.sol:473"
            },
            {
              "contract": "Pledge01Up",
              "label": "beneficiaries",
              "type": "t_struct(Beneficiaries)5261_storage",
              "src": "contracts\\Pledge01Up.sol:475"
            },
            {
              "contract": "Pledge01Up",
              "label": "maxTransferAmount",
              "type": "t_uint256",
              "src": "contracts\\Pledge01Up.sol:477"
            },
            {
              "contract": "Pledge01Up",
              "label": "minHoldTimeSec",
              "type": "t_uint256",
              "src": "contracts\\Pledge01Up.sol:478"
            },
            {
              "contract": "Pledge01Up",
              "label": "pancakeRouter",
              "type": "t_contract(IPancakeRouter02)1479",
              "src": "contracts\\Pledge01Up.sol:480"
            },
            {
              "contract": "Pledge01Up",
              "label": "pancakePair",
              "type": "t_address",
              "src": "contracts\\Pledge01Up.sol:481"
            },
            {
              "contract": "Pledge01Up",
              "label": "generalCharityAddress",
              "type": "t_address",
              "src": "contracts\\Pledge01Up.sol:483"
            },
            {
              "contract": "Pledge01Up",
              "label": "isCharityAddress",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Pledge01Up.sol:484"
            },
            {
              "contract": "Pledge01Up",
              "label": "preferredCharityAddress",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts\\Pledge01Up.sol:485"
            },
            {
              "contract": "Pledge01Up",
              "label": "isFeeFree",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Pledge01Up.sol:487"
            },
            {
              "contract": "Pledge01Up",
              "label": "lastTransferTime",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\Pledge01Up.sol:488"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_struct(Fees)5243_storage": {
              "label": "struct Pledge01Up.Fees",
              "members": [
                {
                  "label": "marketing",
                  "type": "t_uint256"
                },
                {
                  "label": "charity",
                  "type": "t_uint256"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256"
                },
                {
                  "label": "lottery",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(Beneficiaries)5261_storage": {
              "label": "struct Pledge01Up.Beneficiaries",
              "members": [
                {
                  "label": "marketing",
                  "type": "t_address"
                },
                {
                  "label": "charity",
                  "type": "t_address"
                },
                {
                  "label": "liquidity",
                  "type": "t_address"
                },
                {
                  "label": "lottery",
                  "type": "t_address"
                }
              ]
            },
            "t_contract(IPancakeRouter02)1479": {
              "label": "contract IPancakeRouter02"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pledge02Up": {
        "src": "contracts\\Pledge02Up.sol:7",
        "version": {
          "withMetadata": "d4f6aa05c7891fd012f60399a680109ae9438f1ac94cd7ced5df7fc38a622623",
          "withoutMetadata": "ffb9e8eb3e8c79cdc3accc425f79f772d74f5482a132da6f3bb3ef6e88669b8a",
          "linkedWithoutMetadata": "ffb9e8eb3e8c79cdc3accc425f79f772d74f5482a132da6f3bb3ef6e88669b8a"
        },
        "inherit": [
          "Pledge01Up",
          "OwnableUpgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__PledgeV6_init()",
          "__PledgeV6_init_unchained()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Pledge07Up": {
        "src": "contracts\\Pledge07Up.sol:12",
        "version": {
          "withMetadata": "d97b2368e8b82060a6714a5ee667684ea889091dee7d709818be9ffb2b13a9a1",
          "withoutMetadata": "467fa3a35f82360f456cc8e7a89dad21ec5a5e34d4dcfb47945a012add2d4809",
          "linkedWithoutMetadata": "467fa3a35f82360f456cc8e7a89dad21ec5a5e34d4dcfb47945a012add2d4809"
        },
        "inherit": [
          "OwnableUpgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "console"
        ],
        "methods": [
          "name()",
          "symbol()",
          "getOwner()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "burn(uint256)",
          "burnFrom(address,uint256)",
          "initialize()",
          "__Pledge_init()",
          "__Pledge_init_unchained()",
          "feeBalances()",
          "restoreFees(bool)",
          "setMinHoldTimeSec(uint256)",
          "setMaxTransferAmount(uint256)",
          "toLiquify(bool)",
          "setBeneficiaries((address,address,address,address))",
          "createLiquidityPool(address)",
          "setFees((uint256,uint256,uint256,uint256),bool)",
          "freeFromFees(address,bool)",
          "setGeneralCharityAddress(address)",
          "addCharityAddress(address)",
          "removeCharityAddress(address)",
          "changeCharityAddress(address,address)",
          "preferCharityAddress(address)",
          "liquify()",
          "()",
          "___test___setLastTransferTime(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Pledge07Up",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\Pledge07Up.sol:32"
            },
            {
              "contract": "Pledge07Up",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\Pledge07Up.sol:34"
            },
            {
              "contract": "Pledge07Up",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\Pledge07Up.sol:36"
            },
            {
              "contract": "Pledge07Up",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\Pledge07Up.sol:38"
            },
            {
              "contract": "Pledge07Up",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\Pledge07Up.sol:39"
            },
            {
              "contract": "Pledge07Up",
              "label": "initialLowerFees",
              "type": "t_struct(Fees)7204_storage",
              "src": "contracts\\Pledge07Up.sol:472"
            },
            {
              "contract": "Pledge07Up",
              "label": "lowerFees",
              "type": "t_struct(Fees)7204_storage",
              "src": "contracts\\Pledge07Up.sol:473"
            },
            {
              "contract": "Pledge07Up",
              "label": "initialHigherFees",
              "type": "t_struct(Fees)7204_storage",
              "src": "contracts\\Pledge07Up.sol:474"
            },
            {
              "contract": "Pledge07Up",
              "label": "higherFees",
              "type": "t_struct(Fees)7204_storage",
              "src": "contracts\\Pledge07Up.sol:475"
            },
            {
              "contract": "Pledge07Up",
              "label": "beneficiaries",
              "type": "t_struct(Beneficiaries)7222_storage",
              "src": "contracts\\Pledge07Up.sol:477"
            },
            {
              "contract": "Pledge07Up",
              "label": "maxTransferAmount",
              "type": "t_uint256",
              "src": "contracts\\Pledge07Up.sol:479"
            },
            {
              "contract": "Pledge07Up",
              "label": "liquidityQuantum",
              "type": "t_uint256",
              "src": "contracts\\Pledge07Up.sol:480"
            },
            {
              "contract": "Pledge07Up",
              "label": "minHoldTimeSec",
              "type": "t_uint256",
              "src": "contracts\\Pledge07Up.sol:481"
            },
            {
              "contract": "Pledge07Up",
              "label": "pancakeRouter",
              "type": "t_contract(IPancakeRouter02)1479",
              "src": "contracts\\Pledge07Up.sol:483"
            },
            {
              "contract": "Pledge07Up",
              "label": "pancakePair",
              "type": "t_address",
              "src": "contracts\\Pledge07Up.sol:484"
            },
            {
              "contract": "Pledge07Up",
              "label": "generalCharityAddress",
              "type": "t_address",
              "src": "contracts\\Pledge07Up.sol:486"
            },
            {
              "contract": "Pledge07Up",
              "label": "isCharityAddress",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Pledge07Up.sol:487"
            },
            {
              "contract": "Pledge07Up",
              "label": "preferredCharityAddress",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts\\Pledge07Up.sol:488"
            },
            {
              "contract": "Pledge07Up",
              "label": "isFeeFree",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Pledge07Up.sol:490"
            },
            {
              "contract": "Pledge07Up",
              "label": "lastTransferTime",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\Pledge07Up.sol:491"
            },
            {
              "contract": "Pledge07Up",
              "label": "autoliquify",
              "type": "t_bool",
              "src": "contracts\\Pledge07Up.sol:493"
            },
            {
              "contract": "Pledge07Up",
              "label": "beneficiariesSet",
              "type": "t_bool",
              "src": "contracts\\Pledge07Up.sol:494"
            },
            {
              "contract": "Pledge07Up",
              "label": "liquifying",
              "type": "t_bool",
              "src": "contracts\\Pledge07Up.sol:573"
            },
            {
              "contract": "Pledge07Up",
              "label": "__gap",
              "type": "t_array(t_uint256)10_storage",
              "src": "contracts\\Pledge07Up.sol:951"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_struct(Fees)7204_storage": {
              "label": "struct Pledge07Up.Fees",
              "members": [
                {
                  "label": "marketing",
                  "type": "t_uint256"
                },
                {
                  "label": "charity",
                  "type": "t_uint256"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256"
                },
                {
                  "label": "lottery",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(Beneficiaries)7222_storage": {
              "label": "struct Pledge07Up.Beneficiaries",
              "members": [
                {
                  "label": "marketing",
                  "type": "t_address"
                },
                {
                  "label": "charity",
                  "type": "t_address"
                },
                {
                  "label": "liquidity",
                  "type": "t_address"
                },
                {
                  "label": "lottery",
                  "type": "t_address"
                }
              ]
            },
            "t_contract(IPancakeRouter02)1479": {
              "label": "contract IPancakeRouter02"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pledge08Up": {
        "src": "contracts\\Pledge08Up.sol:7",
        "version": {
          "withMetadata": "dbe3bd96a38afda242125c2e6976d75bea8877c0c165943098d1882d139906b5",
          "withoutMetadata": "9b5832d764eb4c3c0d7bf7e8cc6413179753b029e00a03b81affaa6bcc3b50fb",
          "linkedWithoutMetadata": "9b5832d764eb4c3c0d7bf7e8cc6413179753b029e00a03b81affaa6bcc3b50fb"
        },
        "inherit": [
          "Pledge07Up",
          "OwnableUpgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__PledgeV8_init()",
          "__PledgeV8_init_unchained()",
          "___test___setLastTransferTime(address,uint256)",
          "changeOperator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Pledge08Up",
              "label": "operator",
              "type": "t_address",
              "src": "contracts\\Pledge08Up.sol:28"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "f91739d874ef9d6858f92c1fabe8058a216bf98ac5d7d916a09a2bae78199fcc",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IERC20": {
        "src": "contracts\\PancakeFactory.sol:251",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeCallee": {
        "src": "contracts\\PancakeFactory.sol:267",
        "inherit": [],
        "libraries": [],
        "methods": [
          "pancakeCall(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeERC20": {
        "src": "contracts\\PancakeFactory.sol:86",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeFactory": {
        "src": "contracts\\PancakeFactory.sol:19",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakePair": {
        "src": "contracts\\PancakeFactory.sol:35",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts\\PancakeFactory.sol:214",
        "version": {
          "withMetadata": "cc87df5ea0e2ae70caf57e6f4a93720205f34d385bf28717b1227f1acd5d2c8c",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeERC20": {
        "src": "contracts\\PancakeFactory.sol:123",
        "version": {
          "withMetadata": "8fbb8c49e0ee515c8928f40b11cb67d9433d0766cd7d9f83b5c8bece2655104e",
          "withoutMetadata": "8fbb8c49e0ee515c8928f40b11cb67d9433d0766cd7d9f83b5c8bece2655104e",
          "linkedWithoutMetadata": "8fbb8c49e0ee515c8928f40b11cb67d9433d0766cd7d9f83b5c8bece2655104e"
        },
        "inherit": [
          "IPancakeERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeERC20",
            "src": "contracts\\PancakeFactory.sol:141"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeERC20",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts\\PancakeFactory.sol:129"
            },
            {
              "contract": "PancakeERC20",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\PancakeFactory.sol:130"
            },
            {
              "contract": "PancakeERC20",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\PancakeFactory.sol:131"
            },
            {
              "contract": "PancakeERC20",
              "label": "DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts\\PancakeFactory.sol:133"
            },
            {
              "contract": "PancakeERC20",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\PancakeFactory.sol:136"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeFactory": {
        "src": "contracts\\PancakeFactory.sol:463",
        "version": {
          "withMetadata": "a5e17dc80f1d905050a07137539bbe256786b17269ab73899bad20599b5a520c",
          "withoutMetadata": "fdf8b19829fc21ca70c2d996d9fd3892acf61ea7874b0f3d8b5df1842734ea84",
          "linkedWithoutMetadata": "fdf8b19829fc21ca70c2d996d9fd3892acf61ea7874b0f3d8b5df1842734ea84"
        },
        "inherit": [
          "IPancakeFactory"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeFactory",
            "src": "contracts\\PancakeFactory.sol:474"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeFactory",
              "label": "feeTo",
              "type": "t_address",
              "src": "contracts\\PancakeFactory.sol:466"
            },
            {
              "contract": "PancakeFactory",
              "label": "feeToSetter",
              "type": "t_address",
              "src": "contracts\\PancakeFactory.sol:467"
            },
            {
              "contract": "PancakeFactory",
              "label": "getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts\\PancakeFactory.sol:469"
            },
            {
              "contract": "PancakeFactory",
              "label": "allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\PancakeFactory.sol:470"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakePair": {
        "src": "contracts\\PancakeFactory.sol:271",
        "version": {
          "withMetadata": "2de75715eaadc263f93ae31df0472548254992f701bb9830d9ed08b3e5f4fa21",
          "withoutMetadata": "2de75715eaadc263f93ae31df0472548254992f701bb9830d9ed08b3e5f4fa21",
          "linkedWithoutMetadata": "2de75715eaadc263f93ae31df0472548254992f701bb9830d9ed08b3e5f4fa21"
        },
        "inherit": [
          "PancakeERC20",
          "IPancakeERC20",
          "IPancakePair"
        ],
        "libraries": [
          "SafeMath",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "getReserves()",
          "()",
          "initialize(address,address)",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakePair",
            "src": "contracts\\PancakeFactory.sol:321"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts\\PancakeFactory.sol:290"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakePair",
              "label": "factory",
              "type": "t_address",
              "src": "contracts\\PancakeFactory.sol:278"
            },
            {
              "contract": "PancakePair",
              "label": "token0",
              "type": "t_address",
              "src": "contracts\\PancakeFactory.sol:279"
            },
            {
              "contract": "PancakePair",
              "label": "token1",
              "type": "t_address",
              "src": "contracts\\PancakeFactory.sol:280"
            },
            {
              "contract": "PancakePair",
              "label": "reserve0",
              "type": "t_uint112",
              "src": "contracts\\PancakeFactory.sol:282"
            },
            {
              "contract": "PancakePair",
              "label": "reserve1",
              "type": "t_uint112",
              "src": "contracts\\PancakeFactory.sol:283"
            },
            {
              "contract": "PancakePair",
              "label": "blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts\\PancakeFactory.sol:284"
            },
            {
              "contract": "PancakePair",
              "label": "price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\PancakeFactory.sol:286"
            },
            {
              "contract": "PancakePair",
              "label": "price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\PancakeFactory.sol:287"
            },
            {
              "contract": "PancakePair",
              "label": "kLast",
              "type": "t_uint256",
              "src": "contracts\\PancakeFactory.sol:288"
            },
            {
              "contract": "PancakePair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts\\PancakeFactory.sol:290"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\PancakeFactory.sol:109",
        "version": {
          "withMetadata": "3ccbcbfe4f5a07bb844e33a86ba4f2461b2e373ac36c8752a86242edf16c9ede",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts\\PancakeFactory.sol:237",
        "version": {
          "withMetadata": "4f514ac26de5e111b9d9ad3e8852e874623a9bc3a33ea2c3428d191de7675cc4",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    }
  ]
}